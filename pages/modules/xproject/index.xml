<?xml version="1.0" encoding="UTF-8"?>

<?xml-model href="../../../../resources/schemas/webpage.rnc" type="application/relax-ng-compact-syntax"?>

<webpage menu="xproj" root="../..">
   <title>EXPath - XProject</title>
   <section>
      <title>XProject</title>
      <image src="../../images/packaging.jpg" alt="Taps and pipes"/>
      <para>XProject, the XML Project Manager, is a tool helping developers to create and manage XML
         projects. The idea, based on similar tools for other languages, is to use simple
         conventions and some meta-information on the project in order to automate various common
         tasks. Those tasks are for e.g. building a package (based on the <link href="../pkg/"
            >Packaging System</link>) out of the sources, unit-testing the project (using <link
            href="http://code.google.com/p/xspec/">XSpec</link> test suites), or generating source
         documentation (based on <link href="http://xqdoc.org/">xqdoc</link> and <link
            href="https://github.com/xquery/xquerydoc">xquerydoc</link>).</para>
      <para>This documentation contains the following sections:</para>
      <list>
         <item><link href="#download">Download</link></item>
         <item><link href="#structure">The project structure</link></item>
         <item><link href="#usage">Using it</link></item>
      </list>
   </section>
   <divider/>
   <primary id="download">
      <title>Download</title>
      <para>You can you XProject either form oXygen, or from the command-line. If you use oXygen,
         the easiest is to use the <link href="oxygen">plugin</link>. If you want to use XProject
         from the command-line, you can either download it manually from <link
            href="http://code.google.com/p/expath-pkg/downloads/">this page</link> and install the
         XAR file, or you can install it automatically from <link href="http://cxan.org/"
            >CXAN</link>, with the ID <link href="http://cxan.org/pkg/xproject"
         >xproject</link>.</para>
   </primary>
   <primary id="structure">
      <title>The project structure</title>
      <para>XProject helps you organizing an XML project and performing usual actions on it. All you
         have to do is respecting a specific project structure and giving some meta-informations in
         a <emph>project descriptor</emph>. In this documentation, when we use the term
            <emph>project</emph>, we refer to such a directory, following the same structure
         conventions and containing a project descriptor.</para>
      <para>The project structure as such is very simple: the name of the project directory is free,
         and it must contain two sub-directories:</para>
      <list>
         <item><code>src/</code> containing the sources of the project, that is, the code
               <emph>you</emph> want to write</item>
         <item><code>xproject/</code> contains the project descriptor, as well as any other
            meta-informations about your project; the project descriptor is an XML file called
               <code>xproject/project.xml</code></item>
      </list>
      <para>The project can also contain the following sub-directories:</para>
      <list>
         <item><code>dist/</code> is automatically generated and contain the result of building your
            project</item>
         <item><code>test/</code> is where you put your unit tests, which can be run automatically
            by XProject</item>
         <item><code>resources/</code> is ignored and is a convenient place to put anything that is
            not part of the delivery of your project (that won't be delivered as part of the XAR
            file) but that takes part of the project (e.g. some scripts or development tools)</item>
      </list>
      <para>Here is an example of a project:</para>
      <para><sample>my-lib/
   resources/
      backup.xproc
      internal-schema.xsd
   src/
      the-lib.xsl
      other-lib.xql
      resource.xml
   xproject/
      project.xml</sample></para>
      <para>The above project contains three files as part of the deliverable material. It also
         contains a project descriptor, and two resources used by the developers of that project.
         The project descriptor looks like the following:</para>
      <para>
         <sample href="index-1.xml.sample" kind="xml"/>
      </para>
      <para>Basically, the project descriptor has the same structure as a <link href="../pkg/"
            >package descriptor</link>, but in the XProject namespace, without the component
         descriptors. That is, it does not describe explicitly the XSLT and XQuery components it
         contains (in this example). Each component contains an annotation with its own public URI
         (sometimes it can be infered, like for XML Schemas and XQuery library modules, which have a
         target URI). When one builds the project, XProject will automatically introspect the
         components and build the corresponding package descriptor.</para>
      <para>Here are the content of the two components of the project. The XSLT stylesheet
            <code>src/the-lib.xsl</code> contains (note the packaging annotation):</para>
      <para>
         <sample href="index-2.xsl.sample" kind="xslt"/>
      </para>
      <para>and the XQuery library module (note it does not contain annotations, as an XQuery
         library module already has a traget namespace, which is parsed during building the package)
         (note also it contains xquerydoc comments to be formatted with <code>xproj
         doc</code>):</para>
      <para>
         <sample href="index-3.xql.sample" kind="xquery"/>
      </para>
      <para>So once you set your project up (providing a few meta-informations), you usualy don't
         have to maintain anymore the project descriptor. If you want to add a new public component,
         just create it somewhere in <code>src/</code>, and add the corresponding annotation
         directly in it. No need to update any other file, so no descriptor is becoming
         outdated.</para>
   </primary>
   <primary id="usage">
      <title>Using it</title>
      <para>We describe here how to use XProject from within the command-line. The <link
            href="oxygen">oXygen plugin</link> contains a toolbar with buttons for all of the
         corresponding actions, as well as new templates for standard components like XSLT and
         XQuery, with XProject annotations. This description assumes you have correctly installed
         the XProject XAR file and have the <code>xproj</code> shell script in your
            <code>$PATH</code>. You might have to adapt the command to your system though. The shell
         script is just a wrapper around calling Calabash with the correct pipelines for a specific
         action, but you are encouraged to use it.</para>
      <para>The <code>xproj</code> command always expects to be called within a project directory. So
         first <code>cd</code> to your project, then you can invoke <code>xproj</code>. You have
         several actions available:</para>
      <list>
         <item><code>build</code> to build the XAR file (or XAW file for a webapp)</item>
         <item><code>test</code> to run the unit tests</item>
         <item><code>doc</code> to generate the documentation out of the components (like Javadoc
            for Java, for now understands only xquerydoc)</item>
         <item><code>release</code> to build a release file (a ZIP file containing the XAR file,
            sources, and other stuff)</item>
      </list>
      <para>Assuming we have the above example project in <code>/projects/my-lib/</code> and that
         we have <code>xproj</code> in the shell <code>$PATH</code>, the following command will
         create the XAR file:</para>
      <para><sample># cd /projects/my-lib

# xproj build
Building project file:/projects/my-lib/
Generated XAR file dist/my-lib-1.3.0.xar

# </sample></para>
      <para>As you can see, it uses informations from the project descriptor to name the XAR file
         following the convention "<code>dist/[abbrev]-[version].xar</code>". If the directory
            <code>xproject/</code> contains a CXAN descriptor (that is, a file named
            <code>xproject/cxan.xml</code>) and/or a webapp descriptor (that is, a file names
            <code>xproject/expath-web.xml</code>), those will be properly added to the generated
         package. <emph>New actions "publish" and "deploy", still to implement, will allow one to
            automatically publish the package to CXAN and to deploy it on a webapp container,
            respectively.</emph></para>
   </primary>
   <secondary box="true">
      <title>Take it easy!</title>
      <para>There is now a plugin availble for oXygen!  See the <link href="oxygen">plugin
         page</link>.</para>
   </secondary>
</webpage>
